class Company:
    'A heirarchical company with parents, children and securities'
    companyCount = 0

    def __init__(self, name, pkDict, parentEntities, childEntities, securities):
        self.name               = name
        self.pkDict             = pkDict
        self.parentEntities     = parentEntities
        self.childEntities      = childEntities
        self.securities         = securities
        Company.companyCount    += 1
        
        #when creating a new company with a parent, ensure that it appears as a child of that company
        for parent in parentEntities:
            if name not in parent.childEntities:
                parent.childEntities.append( self )
                
        #when creating a new company with a child, ensure that it appears as a parent of that company
        for child in childEntities:
            if name not in child.parentEntities:
                child.parentEntities.append( self )

    def printCount(self):
        print( "Total Companies %d" % Company.companyCount )

    def printChildren(self):
        print( "Children: " + ", ".join( child.name for child in self.childEntities ) )
    
    def printParents(self):
        print( "Parents: " + ", ".join( parent.name for parent in self.parentEntities ) )

    def printSecurities(self):
        print( "Securities: " + ", ".join( security.name for security in self.securities ) )
    
    def printCompanySummary(self):
        print( self.name )
        self.printParents()
        self.printChildren()
        self.printSecurities()
        print("\n")
        
    def addParent(self, parent):
        self.parentEntities.append(parent)
        parent.childEntities.append(self)

    def addChild(self, child):
        self.childEntities.append(child)
        child.parentEntities.append(self)

    def addSecurity(self, security):
        self.securities.append(security)

class Security:
    'pretty much what the name says'
    securityCount = 0
    
    def __init__(self, name, pkDict, issuer):
        self.name   = name
        self.pkDict = pkDict
        self.issuer = issuer
        if name not in issuer.securities:
            issuer.addSecurity(self)
    
    def printSecuritySummary(self):
        print(self.name)
        
class mapTable:
    'A table with various primary keys'    
    def __init__(self, name, pkDict):
        self.name   = name
        self.pkDict = pkDict
    
#    def printSecuritySummary(self):
#        print(self.name)

#class mapTable:
#    'A table with various primary keys'    
#    def __init__(self, name, pkDict):
#        self.name   = name
#        self.pkDict = pkDict
